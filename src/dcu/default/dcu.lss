
dcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ba  00000000  00000000  00000157  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000076  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ca  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007d  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_13>:
#include <avr/io.h>
#include <stdio.h>
#include <avr/interrupt.h>

ISR(USART_RXC_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	char c;
	if (UCSRA & (1<<FE | 1<<DOR | 1<<PE)) {
  78:	8b b1       	in	r24, 0x0b	; 11
  7a:	8c 71       	andi	r24, 0x1C	; 28
  7c:	31 f0       	breq	.+12     	; 0x8a <__vector_13+0x1e>
            c = UDR;
  7e:	8c b1       	in	r24, 0x0c	; 12
            while (~UCSRA & 1<<UDRE);
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <__vector_13+0x14>
            UDR = '?';
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	8c b9       	out	0x0c, r24	; 12
  88:	03 c0       	rjmp	.+6      	; 0x90 <__vector_13+0x24>
        }
        else {
            c = UDR;
  8a:	8c b1       	in	r24, 0x0c	; 12
            PORTB = ~c;
  8c:	80 95       	com	r24
  8e:	88 bb       	out	0x18, r24	; 24
        }
}
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <main>:

int main(void) {
	float adcval;
    // 9600-7-E-1
    UCSRA = 0x00;
  9c:	1b b8       	out	0x0b, r1	; 11
    UCSRB = 0x18 | (1<<7);
  9e:	88 e9       	ldi	r24, 0x98	; 152
  a0:	8a b9       	out	0x0a, r24	; 10
    UCSRC = 0xA4;
  a2:	84 ea       	ldi	r24, 0xA4	; 164
  a4:	80 bd       	out	0x20, r24	; 32
    UBRRH = 0;
  a6:	10 bc       	out	0x20, r1	; 32
    UBRRL = 23;
  a8:	87 e1       	ldi	r24, 0x17	; 23
  aa:	89 b9       	out	0x09, r24	; 9

	DDRB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	sei();
  b0:	78 94       	sei
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x16>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
