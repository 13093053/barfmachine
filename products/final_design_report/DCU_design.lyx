#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
DCU design
\end_layout

\begin_layout Standard
The DCU's entire functionality was to be determined by the project team.
 The only requirements given by BARK were the use of an ATmega32 microcontroller
 or similar controllers, and some kind of interaction with the analogue
 part of the system.
 In team 1's case, the DCU allows control of all audio controls (potentiometers)
 in the analogue circuits using MIDI messages.
 The DCU then adjusts the values of digital potentiometers placed in the
 circuits based on the incoming MIDI message.
 First, the physical design of the DCU and related components are discussed.
 After that, the code used for the DCU will be looked at.
\end_layout

\begin_layout Subsection
The DCU, related components, and its connection to the rest of the system
\end_layout

\begin_layout Standard
The choice to use MIDI messages as input for the DCU was made with the idea
 that MIDI hardware is generally designed for use with music and/or audio.
 Many MIDI devices include twisting knobs which act as potentiometers, and
 thus being able to use a MIDI device to control the various controls in
 the circuitry allows for an intuitive and easily expandable/customizable
 user interface.
 The type of digital potentiometers used in combination with the DCU are
 the MCP4251-103E/P (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DigiPot-photo"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename digipot_photo.jpg
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
The MCP4251-103E/P
\begin_inset CommandInset label
LatexCommand label
name "fig:DigiPot-photo"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
These models hold two potentiometers per package, and expect incoming commands
 through SPI which makes them easily usable with the ATmega328 which supports
 a direct SPI connection.
 As illustrated in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-DCU_2"

\end_inset

, the digital potentiometers allow the DCU to take over control of the balance
 control, bass cut-off control, treble cut-off control, bass boost control,
 treble boost control and volume control.
 In its current state, the code only handles so-called 'Control Change'
 MIDI messages which indicate the change of a physical control, such as
 a knob.
 These messages include a value indicating the position of the knob as well
 as an identifier indicating which specific knob was changed.
 The message is processed in the DCU and the correct command is passed on
 to the appropriate potentiometer over the SPI connection.
 Only when a new 'Control Change' message is received, will the digital
 potentiometer(s) be adjusted accordingly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename schematic_DCU.png
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schematic of DCU
\begin_inset CommandInset label
LatexCommand label
name "fig:Schematic-DCU_2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-DCU_2"

\end_inset

, the control bus (ATmega328 SPI output) is connected to all parts of the
 preamplifier.
 The control bus consists of seven signal lines: six CS (chip select) lines
 and one data line (carrying the value to be read by the digital potentiometer.
 Between the MIDI input and the USART of the ATmega328, an isolator is placed
 to electrically isolate the MIDI device from the microcontroller, protecting
 the devices from overvoltage.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Might need some more info on the isolator here
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C code
\end_layout

\begin_layout Standard
The C code can be divided into the following subsections:
\end_layout

\begin_layout Itemize
Headers for digital potentiometers and MIDI
\end_layout

\begin_layout Itemize
Initialization
\end_layout

\begin_layout Itemize
Main program loop
\end_layout

\begin_layout Itemize
MIDI input functions
\end_layout

\begin_layout Itemize
Digital potentiometer output functions
\end_layout

\begin_layout Standard
The individual blocks of code will be discussed and explained.
 In order to see how the different parts of the code are connected to each
 other, the complete C code can be found in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Appendix-DCU"

\end_inset

.
 When addressing specific pieces of code, references will be made to the
 line numbers as seen in these appendices.
\end_layout

\begin_layout Subsubsection
digipots.h and midi.h
\end_layout

\begin_layout Standard
The two custom header files used in the code contain all the constants asssociat
ed with the ports (and pins) connected to the peripheral devices.
 As seen in 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Appendix-DCU"

\end_inset

, digipots.h contains the correct values to set the DDR and PORT registers
 associated with the potentiometers.
 The 
\family typewriter
*_CS_PIN
\family default
 constants define the correct value to be written to the PORT register that
 drive the 
\begin_inset Formula $\overline{CS}$
\end_inset

 pins of the digital potentiometers.
 Since there is only one data line for all of the controls, when writing
 a value to the digital potentiometers, only the appropriate 
\begin_inset Formula $\overline{CS}$
\end_inset

 pins are to be driven.
 This will become more clear when the output functions are discussed.
 midi.h contains all the constants associated with the incoming MIDI data.
 MIDI messages consist of at least one byte.
 In case of MIDI Control Change messages which we are concerned with, a
 full message consist of three bytes: 
\family typewriter
1011nnnn
\family default
, 
\family typewriter
0ccccccc
\family default
 and 
\family typewriter
0vvvvvvv
\family default
 respectively where 
\family typewriter
nnnn
\family default
 denotes the MIDI channel, 
\family typewriter
ccccccc
\family default
 denotes the controller number and 
\family typewriter
vvvvvvv
\family default
 denotes the value of the controller.
 
\family typewriter
CTRL_CH
\family default
 is the byte value in the MIDI message that denotes the type of MIDI command
 (in our case, Control Change).
 The 
\family typewriter
*_CTRL
\family default
 constants are used to define what controller number (in the 
\family typewriter
0ccccccc
\family default
 byte) correspond to what control.
 This way the program will be able to determine which 
\begin_inset Formula $\overline{CS}$
\end_inset

 pin should be driven when the received controller value is passsed on to
 the digital potentiometers.
\end_layout

\begin_layout Subsubsection
Initialization
\end_layout

\begin_layout Standard
The initializations are made in dcu.c, from the beginning to line number
 66.
 The global variables are declared, appropriate DDR registers are set, the
 USART registers are set, and the SPI registers are set.
 Finally, all controls are reset by initializing the digital potentiometers
 to maximum position.
\end_layout

\end_body
\end_document
